{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\react-native\\\\Doctro\\\\screen\\\\LoadingScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as Permissions from 'expo-permissions';\nimport firebase from \"../Firebase\";\n\nvar LoadingScreen = function (_Component) {\n  _inherits(LoadingScreen, _Component);\n\n  var _super = _createSuper(LoadingScreen);\n\n  function LoadingScreen(props) {\n    var _this;\n\n    _classCallCheck(this, LoadingScreen);\n\n    _this = _super.call(this, props);\n\n    _this.getLocation();\n\n    return _this;\n  }\n\n  _createClass(LoadingScreen, [{\n    key: \"getLocation\",\n    value: function getLocation() {\n      var _await$Permissions$as, status;\n\n      return _regeneratorRuntime.async(function getLocation$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));\n\n            case 3:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n\n              if (status !== 'granted') {\n                console.log(' permisstion denid ');\n              }\n\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      firebase.auth().onAuthStateChanged(function (user) {\n        _this2.props.navigation.navigate(user ? 'App' : 'Auth');\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.contanier,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 7\n        }\n      }, React.createElement(Image, {\n        style: {\n          flex: 1,\n          width: '100%'\n        },\n        source: require(\"../images/photoApp/logo.png\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return LoadingScreen;\n}(Component);\n\nexport { LoadingScreen as default };\nvar styles = StyleSheet.create({\n  contanier: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["E:/react-native/Doctro/screen/LoadingScreen.js"],"names":["React","Component","Permissions","firebase","LoadingScreen","props","getLocation","askAsync","LOCATION","status","console","log","auth","onAuthStateChanged","user","navigation","navigate","styles","contanier","flex","width","require","StyleSheet","create","justifyContent","alignItems"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AAEA,OAAOC,QAAP;;IAEqBC,a;;;;;AAEf,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AACA,UAAKC,WAAL;;AAFiB;AAKpB;;;;;;;;;;;;;+CAK8BJ,WAAW,CAACK,QAAZ,CAAqBL,WAAW,CAACM,QAAjC,C;;;;AAAjBC,cAAAA,M,yBAAAA,M;;AACR,kBAAIA,MAAM,KAAK,SAAf,EAA0B;AACtBC,gBAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH;;;;;;;;AAGDD,cAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;wCAIc;AAAA;;AAClBR,MAAAA,QAAQ,CAACS,IAAT,GAAgBC,kBAAhB,CAAmC,UAAAC,IAAI,EAAI;AACzC,QAAA,MAAI,CAACT,KAAL,CAAWU,UAAX,CAAsBC,QAAtB,CAA+BF,IAAI,GAAG,KAAH,GAAW,MAA9C;AACD,OAFD;AAGD;;;6BAeM;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,KAAK,EAAE;AAAlB,SADT;AAEE,QAAA,MAAM,EAAEC,OAAO,+BAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AASD;;;;EAnDwCpB,S;;SAAtBG,a;AAsDrB,IAAMa,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETK,IAAAA,cAAc,EAAE,QAFP;AAGTC,IAAAA,UAAU,EAAE;AAHH;AADoB,CAAlB,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { StyleSheet, View, AsyncStorage, Image } from 'react-native';\r\nimport * as Permissions from 'expo-permissions';\r\n\r\nimport firebase from '../Firebase';\r\n\r\nexport default class LoadingScreen extends Component {\r\n\r\n      constructor(props) {\r\n        super(props);\r\n        this.getLocation();\r\n        // AsyncStorage.removeItem('type')\r\n        // this.startApp();\r\n    }\r\n\r\n    async getLocation () {\r\n      try{\r\n          \r\n          const { status } = await Permissions.askAsync(Permissions.LOCATION);\r\n          if (status !== 'granted') {\r\n              console.log(' permisstion denid ');\r\n          }\r\n\r\n      } catch (e) {\r\n          console.log(e);\r\n      }\r\n  }\r\n\r\n    componentDidMount() {\r\n      firebase.auth().onAuthStateChanged(user => {\r\n        this.props.navigation.navigate(user ? 'App' : 'Auth')\r\n      })\r\n    }\r\n\r\n    // async startApp() {\r\n    //     try {\r\n    //     const token = await AsyncStorage.getItem('type');\r\n    //         if (token) {\r\n    //             this.props.navigation.navigate('App')\r\n    //         } else {\r\n    //             this.props.navigation.navigate('Auth')    \r\n    //         }\r\n    //     } catch (e) {\r\n    //         console.log(e)\r\n    //     }\r\n    // };\r\n\r\n  render() {\r\n    return (\r\n      <View style={styles.contanier}>\r\n        <Image\r\n          style={{ flex: 1, width: '100%'}} \r\n          source={require('../images/photoApp/logo.png')}\r\n          // startApp={this.startApp.bind(this)} \r\n        />\r\n      </View>\r\n    )\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  contanier: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}
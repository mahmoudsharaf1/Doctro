{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as rtlDetect from 'rtl-detect';\nexport default {\n  get isRTL() {\n    return rtlDetect.isRtlLang(this.locale);\n  },\n\n  get locale() {\n    var locale = navigator.language || navigator['systemLanguage'] || navigator['browserLanguage'] || navigator['userLanguage'] || this.locales[0];\n    return locale;\n  },\n\n  get locales() {\n    var _navigator = navigator,\n        _navigator$languages = _navigator.languages,\n        languages = _navigator$languages === void 0 ? [] : _navigator$languages;\n    return Array.from(languages);\n  },\n\n  get timezone() {\n    var defaultTimeZone = 'Etc/UTC';\n\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n\n  get isoCurrencyCodes() {\n    return [];\n  },\n\n  get country() {\n    var locale = this.locale;\n\n    if (typeof locale === 'string' && locale.length) {\n      var isoCountryCode = locale.substring(locale.lastIndexOf('-') + 1);\n      return isoCountryCode.toUpperCase();\n    }\n\n    return undefined;\n  },\n\n  getLocalizationAsync: function getLocalizationAsync() {\n    var country, isoCurrencyCodes, timezone, locales, locale, isRTL;\n    return _regeneratorRuntime.async(function getLocalizationAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            country = this.country, isoCurrencyCodes = this.isoCurrencyCodes, timezone = this.timezone, locales = this.locales, locale = this.locale, isRTL = this.isRTL;\n            return _context.abrupt(\"return\", {\n              country: country,\n              isoCurrencyCodes: isoCurrencyCodes,\n              timezone: timezone,\n              locales: locales,\n              locale: locale,\n              isRTL: isRTL\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  }\n};","map":{"version":3,"sources":["../src/ExpoLocalization.web.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,SAAZ,MAA2B,YAA3B;AAIA,eAAe;AACb,MAAI,KAAJ,GAAS;AACP,WAAO,SAAS,CAAC,SAAV,CAAoB,KAAK,MAAzB,CAAP;AACD,GAHY;;AAIb,MAAI,MAAJ,GAAU;AACR,QAAM,MAAM,GACV,SAAS,CAAC,QAAV,IACA,SAAS,CAAC,gBAAD,CADT,IAEA,SAAS,CAAC,iBAAD,CAFT,IAGA,SAAS,CAAC,cAAD,CAHT,IAIA,KAAK,OAAL,CAAa,CAAb,CALF;AAMA,WAAO,MAAP;AACD,GAZY;;AAab,MAAI,OAAJ,GAAW;AAAA,qBACkB,SADlB;AAAA,0CACD,SADC;AAAA,QACD,SADC,qCACW,EADX;AAET,WAAO,KAAK,CAAC,IAAN,CAAW,SAAX,CAAP;AACD,GAhBY;;AAiBb,MAAI,QAAJ,GAAY;AACV,QAAM,eAAe,GAAG,SAAxB;;AACA,QAAI,OAAO,IAAP,KAAgB,WAApB,EAAiC;AAC/B,aAAO,eAAP;AACD;;AACD,WAAO,IAAI,CAAC,cAAL,GAAsB,eAAtB,GAAwC,QAAxC,IAAoD,eAA3D;AACD,GAvBY;;AAwBb,MAAI,gBAAJ,GAAoB;AAElB,WAAO,EAAP;AACD,GA3BY;;AA4Bb,MAAI,OAAJ,GAAW;AAAA,QACD,MADC,GACU,IADV,CACD,MADC;;AAET,QAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,MAAM,CAAC,MAAzC,EAAiD;AAC/C,UAAM,cAAc,GAAG,MAAM,CAAC,SAAP,CAAiB,MAAM,CAAC,WAAP,CAAmB,GAAnB,IAA0B,CAA3C,CAAvB;AACA,aAAO,cAAc,CAAC,WAAf,EAAP;AACD;;AACD,WAAO,SAAP;AACD,GAnCY;;AAoCP,EAAA,oBApCO;AAAA;AAAA;AAAA;AAAA;AAAA;AAqCH,YAAA,OArCG,GAqC6D,IArC7D,CAqCH,OArCG,EAqCM,gBArCN,GAqC6D,IArC7D,CAqCM,gBArCN,EAqCwB,QArCxB,GAqC6D,IArC7D,CAqCwB,QArCxB,EAqCkC,OArClC,GAqC6D,IArC7D,CAqCkC,OArClC,EAqC2C,MArC3C,GAqC6D,IArC7D,CAqC2C,MArC3C,EAqCmD,KArCnD,GAqC6D,IArC7D,CAqCmD,KArCnD;AAAA,6CAsCJ;AACL,cAAA,OAAO,EAAP,OADK;AAEL,cAAA,gBAAgB,EAAhB,gBAFK;AAGL,cAAA,QAAQ,EAAR,QAHK;AAIL,cAAA,OAAO,EAAP,OAJK;AAKL,cAAA,MAAM,EAAN,MALK;AAML,cAAA,KAAK,EAAL;AANK,aAtCI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import * as rtlDetect from 'rtl-detect';\n\nimport { Localization } from './Localization.types';\n\nexport default {\n  get isRTL(): boolean {\n    return rtlDetect.isRtlLang(this.locale);\n  },\n  get locale(): string {\n    const locale =\n      navigator.language ||\n      navigator['systemLanguage'] ||\n      navigator['browserLanguage'] ||\n      navigator['userLanguage'] ||\n      this.locales[0];\n    return locale;\n  },\n  get locales(): string[] {\n    const { languages = [] } = navigator;\n    return Array.from(languages);\n  },\n  get timezone(): string {\n    const defaultTimeZone = 'Etc/UTC';\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n  get isoCurrencyCodes(): string[] {\n    // TODO: Bacon: Add this - very low priority\n    return [];\n  },\n  get country(): string | undefined {\n    const { locale } = this;\n    if (typeof locale === 'string' && locale.length) {\n      const isoCountryCode = locale.substring(locale.lastIndexOf('-') + 1);\n      return isoCountryCode.toUpperCase();\n    }\n    return undefined;\n  },\n  async getLocalizationAsync(): Promise<Localization> {\n    const { country, isoCurrencyCodes, timezone, locales, locale, isRTL } = this;\n    return {\n      country,\n      isoCurrencyCodes,\n      timezone,\n      locales,\n      locale,\n      isRTL,\n    };\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\react-native\\\\Doctro\\\\screen\\\\ChooseLocation.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport MapView from 'react-native-maps';\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { ListItem, Button } from 'react-native-elements';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { savelocation } from \"../actions\";\nimport FbConfig from \"../FbConfig\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar ASPECT_RATIO = width / height;\nvar LAT_DELTA = 0.020;\nvar LONG_DELTA = LAT_DELTA * ASPECT_RATIO;\n\nvar ChooseLocation = function (_Component) {\n  _inherits(ChooseLocation, _Component);\n\n  var _super = _createSuper(ChooseLocation);\n\n  function ChooseLocation(props) {\n    var _this;\n\n    _classCallCheck(this, ChooseLocation);\n\n    _this = _super.call(this, props);\n\n    _this.search = function _callee() {\n      var endPoint, _await$axios$get, data;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              endPoint = 'https://maps.googleapis.com/maps/api/place/textsearch/json?query=';\n              endPoint += _this.state.query;\n              endPoint += \"&key=\" + FbConfig.googleApi;\n              _context.prev = 3;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(axios.get(endPoint));\n\n            case 6:\n              _await$axios$get = _context.sent;\n              data = _await$axios$get.data;\n\n              _this.setState({\n                address: data.results\n              });\n\n              console.log(data);\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](3);\n              console.log(_context.t0);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[3, 12]], Promise);\n    };\n\n    _this.state = {\n      initMap: true,\n      latitude: null,\n      longitude: null,\n      error: null,\n      query: '',\n      address: null,\n      selectedLocation: null,\n      btnDisabled: true\n    };\n    return _this;\n  }\n\n  _createClass(ChooseLocation, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.saved) {\n        Alert.alert('Success');\n      }\n    }\n  }, {\n    key: \"setLocation\",\n    value: function setLocation() {\n      var _this$state = this.state,\n          address = _this$state.address,\n          latitude = _this$state.latitude,\n          longitude = _this$state.longitude;\n      this.props.savelocation({\n        address: address,\n        latitude: latitude,\n        longitude: longitude\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(navigator.geolocation.getCurrentPosition(function (position) {\n                _this2.setState({\n                  latitude: position.coords.latitude,\n                  longitude: position.coords.longitude,\n                  error: null\n                });\n              }, function (error) {\n                return _this2.setState({\n                  error: error.message\n                });\n              }, {\n                enableHighAccuracy: true,\n                timeout: 10000,\n                maximumAge: 1000\n              }));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"toggleAddress\",\n    value: function toggleAddress() {\n      var _this3 = this;\n\n      if (!this.state.address) return;\n      return React.createElement(ScrollView, {\n        style: {\n          height: 200\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }\n      }, this.state.address.map(function (item, i) {\n        return React.createElement(ListItem, {\n          style: styles.listItem,\n          key: i,\n          title: item.name,\n          subtitle: item.formatted_address,\n          leftIcon: {\n            name: 'ios-pin',\n            type: 'ionicon'\n          },\n          onPress: _this3.setSelectedLocation.bind(_this3, item),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }\n        });\n      }));\n    }\n  }, {\n    key: \"setSelectedLocation\",\n    value: function setSelectedLocation(item) {\n      var location = item.geometry.location;\n      var formattedItem = {\n        name: item.name,\n        address: item.formatted_address,\n        latitude: location.lat,\n        longitude: location.lng\n      };\n      this.setState({\n        address: null,\n        selectedLocation: formattedItem,\n        btnDisabled: false\n      });\n      this.map.animateToRegion({\n        latitude: formattedItem.latitude,\n        longitude: formattedItem.longitude,\n        latitudeDelta: LAT_DELTA,\n        longitudeDelta: LONG_DELTA\n      }, 500);\n    }\n  }, {\n    key: \"showMapMarker\",\n    value: function showMapMarker() {\n      if (!this.state.selectedLocation) return;\n      var _this$state$selectedL = this.state.selectedLocation,\n          latitude = _this$state$selectedL.latitude,\n          longitude = _this$state$selectedL.longitude,\n          name = _this$state$selectedL.name;\n      return React.createElement(MapView.Marker, {\n        title: name,\n        coordinate: {\n          latitude: latitude,\n          longitude: longitude\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      if (!this.state.initMap) {\n        return React.createElement(ActivityIndicator, {\n          style: {\n            flex: 1,\n            justifyContent: 'center',\n            alignItems: 'center'\n          },\n          size: 50,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 20\n          }\n        });\n      }\n\n      var _this$state2 = this.state,\n          latitude = _this$state2.latitude,\n          longitude = _this$state2.longitude;\n      return React.createElement(ScrollView, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: {\n          zIndex: 1,\n          position: 'absolute',\n          marginHorizontal: 15,\n          marginTop: 30\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: {\n          alignItems: 'center',\n          flexDirection: 'row',\n          marginTop: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this4.props.navigation.goBack();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }\n      }, React.createElement(Ionicons, {\n        name: \"ios-arrow-back\",\n        size: 30,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 29\n        }\n      })), React.createElement(View, {\n        style: {\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginHorizontal: '30%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 18,\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 29\n        }\n      }, \"Your location\"))), React.createElement(View, {\n        style: styles.containerSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 17\n        }\n      }, React.createElement(TextInput, {\n        style: styles.search,\n        placeholder: \"Type location you want\",\n        onChangeText: function onChangeText(query) {\n          return _this4.setState({\n            query: query\n          });\n        },\n        onSubmitEditing: function onSubmitEditing() {\n          return _this4.search();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }\n      }), React.createElement(Button, {\n        raised: true,\n        btnContainer: styles.btnContainer,\n        title: \"Send\",\n        disabled: this.state.btnDisabled || this.props.saving,\n        loading: this.props.saving,\n        onPress: this.setLocation.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }\n      })), React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }\n      }, this.toggleAddress())), React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 17\n        }\n      }, React.createElement(MapView, {\n        ref: function ref(map) {\n          return _this4.map = map;\n        },\n        style: styles.mapStyle,\n        initialRegion: {\n          latitude: latitude,\n          longitude: longitude,\n          latitudeDelta: LAT_DELTA,\n          longitudeDelta: LONG_DELTA\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }\n      }, this.showMapMarker())));\n    }\n  }]);\n\n  return ChooseLocation;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  mapStyle: {\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height\n  },\n  search: {\n    backgroundColor: '#fff',\n    marginLeft: 17,\n    flex: 1,\n    padding: 10,\n    marginTop: 10,\n    borderRadius: 5,\n    shadowColor: '#fff',\n    elevation: 5,\n    width: width / 1.2\n  },\n  iconStyle: {\n    fontSize: 40,\n    color: '#fff'\n  },\n  containerSearch: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  listItem: {\n    backgroundColor: '#fff',\n    marginLeft: 17,\n    flex: 1,\n    marginTop: 10,\n    elevation: 5,\n    width: width / 1.2\n  },\n  btnContainer: {\n    padding: 10\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var location = _ref.location;\n  return {\n    saving: location.saving,\n    saved: location.saved\n  };\n};\n\nexport default connect(mapStateToProps, {\n  savelocation: savelocation\n})(ChooseLocation);","map":{"version":3,"sources":["E:/react-native/Doctro/screen/ChooseLocation.js"],"names":["React","Component","MapView","Ionicons","ListItem","Button","axios","connect","savelocation","FbConfig","Dimensions","get","width","height","ASPECT_RATIO","LAT_DELTA","LONG_DELTA","ChooseLocation","props","search","endPoint","state","query","googleApi","data","setState","address","results","console","log","initMap","latitude","longitude","error","selectedLocation","btnDisabled","nextProps","saved","Alert","alert","navigator","geolocation","getCurrentPosition","position","coords","message","enableHighAccuracy","timeout","maximumAge","map","item","i","styles","listItem","name","formatted_address","type","setSelectedLocation","bind","location","geometry","formattedItem","lat","lng","animateToRegion","latitudeDelta","longitudeDelta","flex","justifyContent","alignItems","container","zIndex","marginHorizontal","marginTop","flexDirection","navigation","goBack","fontSize","fontWeight","containerSearch","btnContainer","saving","setLocation","toggleAddress","mapStyle","showMapMarker","StyleSheet","create","backgroundColor","marginLeft","padding","borderRadius","shadowColor","elevation","iconStyle","color","mapStateToProps"],"mappings":"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","sourcesContent":["//import liraries\r\nimport React, {Component} from 'react';\r\nimport { \r\n    View, \r\n    StyleSheet, \r\n    Dimensions, \r\n    Text, \r\n    TouchableOpacity, \r\n    TextInput, \r\n    ScrollView, \r\n    ActivityIndicator,\r\n    Alert,\r\n    \r\n} from 'react-native';\r\nimport MapView from 'react-native-maps';\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport { ListItem, Button} from 'react-native-elements';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { savelocation } from '../actions';\r\nimport FbConfig from '../FbConfig';\r\n\r\nconst { width, height} =  Dimensions.get('window');\r\nconst ASPECT_RATIO = width / height;\r\nconst LAT_DELTA = 0.020;\r\nconst LONG_DELTA = LAT_DELTA * ASPECT_RATIO;\r\n\r\nclass ChooseLocation extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            initMap: true,\r\n            latitude: null,\r\n            longitude: null,\r\n            error: null,\r\n            query: '',\r\n            address: null,\r\n            selectedLocation: null,\r\n            btnDisabled: true   \r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if(nextProps.saved) {\r\n            // this.props.navigation.navigate('Browse01');\r\n            Alert.alert('Success')\r\n        }\r\n    }\r\n\r\n    setLocation() {\r\n        const { address, latitude, longitude } = this.state;\r\n        this.props.savelocation({address, latitude, longitude});\r\n        \r\n    }\r\n\r\n    async componentDidMount () {\r\n    //getCurrentPositionAsync\r\n        await navigator.geolocation.getCurrentPosition( (position) => {\r\n                this.setState({\r\n                latitude: position.coords.latitude,\r\n                longitude: position.coords.longitude,\r\n                error: null,\r\n                });\r\n            },\r\n            (error) => this.setState({ error: error.message }),\r\n            { enableHighAccuracy: true,timeout: 10000, maximumAge: 1000 }\r\n            );\r\n    };\r\n\r\n    search = async () => {\r\n        // Google Api\r\n\r\n        let endPoint = 'https://maps.googleapis.com/maps/api/place/textsearch/json?query=';\r\n        endPoint += this.state.query;\r\n        endPoint += `&key=${FbConfig.googleApi}`\r\n\r\n        try{\r\n            const {data} = await axios.get(endPoint);\r\n\r\n            this.setState({ address: data.results });\r\n            console.log(data)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n        // let address = [];\r\n        // for ( let i = 0; i < 50; i++ ) {\r\n        //     address[i] = { name: `Name ${i}`, address: `Address ${i}`, latitude: 30.511211601035782,longitude: 30.90867916122079 }\r\n        // }\r\n        // this.setState({ address })\r\n    };\r\n\r\n\r\n    toggleAddress() {\r\n        if(!this.state.address) return;\r\n        return (\r\n            <ScrollView style={{ height: 200}}>\r\n                {\r\n                    this.state.address.map( (item, i) => (\r\n                        <ListItem\r\n                            style={styles.listItem} \r\n                            key={i}\r\n                            title={item.name}\r\n                            subtitle={item.formatted_address}\r\n                            leftIcon = {{ name: 'ios-pin', type: 'ionicon'}}\r\n                            onPress={this.setSelectedLocation.bind(this, item)}\r\n                        />\r\n                    ) )\r\n                }\r\n            </ScrollView>\r\n        );\r\n    };\r\n\r\n\r\n\r\n    setSelectedLocation(item) {\r\n        const { geometry: { location } } = item\r\n        \r\n        const  formattedItem = {\r\n            name: item.name,\r\n            address: item.formatted_address,\r\n            latitude: location.lat,\r\n            longitude: location.lng\r\n        };\r\n\r\n        this.setState({ address: null, selectedLocation: formattedItem, btnDisabled: false });\r\n        \r\n        this.map.animateToRegion(\r\n            {\r\n                latitude: formattedItem.latitude,\r\n                longitude: formattedItem.longitude,\r\n                latitudeDelta: LAT_DELTA,\r\n                longitudeDelta: LONG_DELTA\r\n            }, 500\r\n        )\r\n    }\r\n\r\n    showMapMarker() {\r\n        if(!this.state.selectedLocation) return;\r\n        const { latitude, longitude, name } = this.state.selectedLocation;\r\n\r\n        return (\r\n            <MapView.Marker \r\n                title={name}\r\n                coordinate={{ latitude, longitude }}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        if (!this.state.initMap) {\r\n            return <ActivityIndicator \r\n                style={{flex: 1, justifyContent: 'center', alignItems: 'center'}} size={50} />;\r\n        }\r\n        const { latitude, longitude } = this.state;\r\n        \r\n        return (\r\n            <ScrollView style={styles.container}>\r\n                <View style={{zIndex: 1, position: 'absolute', marginHorizontal: 15, marginTop: 30}}>\r\n                    <View style={{alignItems: 'center', flexDirection: 'row', marginTop: 10}}>\r\n                        <TouchableOpacity onPress={() => this.props.navigation.goBack()}>\r\n                            <Ionicons name='ios-arrow-back' size={30} />\r\n                        </TouchableOpacity>\r\n                        <View style={{alignItems: 'center', justifyContent: 'center', marginHorizontal: '30%'}}>\r\n                            <Text style={{fontSize: 18, fontWeight: 'bold'}}>Your location</Text>\r\n                        </View>\r\n                    </View>\r\n                <View style={styles.containerSearch}>\r\n                    <TextInput \r\n                        style={styles.search} \r\n                        placeholder='Type location you want'\r\n                        onChangeText={(query) => this.setState({query})}\r\n                        onSubmitEditing= {() => this.search()}\r\n                    />\r\n                        <Button\r\n                            raised\r\n                            btnContainer={styles.btnContainer}\r\n                            title='Send'\r\n                            disabled={this.state.btnDisabled || this.props.saving}\r\n                            loading={this.props.saving}\r\n                            onPress={this.setLocation.bind(this)}\r\n                        />\r\n                </View>\r\n                    <View>\r\n                        { this.toggleAddress() }\r\n                    </View>\r\n                </View>\r\n                <View> \r\n                    <MapView\r\n                        ref= {map => this.map = map}\r\n                        style={styles.mapStyle}       \r\n                        initialRegion={{\r\n                            latitude: latitude,\r\n                            longitude: longitude,\r\n                            latitudeDelta: LAT_DELTA,\r\n                            longitudeDelta: LONG_DELTA\r\n                            \r\n                        }}\r\n                    >\r\n                        \r\n                        {this.showMapMarker()}\r\n                    </MapView>\r\n                    \r\n                </View>\r\n\r\n            </ScrollView>\r\n        );\r\n    }\r\n}\r\n\r\n// define your styles\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n    },\r\n    mapStyle: {\r\n        width: Dimensions.get('window').width,\r\n        height: Dimensions.get('window').height,\r\n    },\r\n    search: {\r\n        backgroundColor: '#fff',\r\n        marginLeft: 17, \r\n        flex: 1, \r\n        padding: 10, \r\n        marginTop: 10,\r\n        borderRadius: 5,\r\n        shadowColor: '#fff',\r\n        elevation: 5,\r\n        width: width / 1.2\r\n    },\r\n    iconStyle: {\r\n        fontSize: 40,\r\n        color: '#fff',\r\n\r\n    },\r\n    containerSearch: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n    },\r\n    listItem: {\r\n        backgroundColor: '#fff',\r\n        marginLeft: 17, \r\n        flex: 1,  \r\n        marginTop: 10,\r\n        elevation: 5,\r\n        width: width / 1.2\r\n    },\r\n    btnContainer: {\r\n        padding: 10\r\n    }\r\n});\r\n\r\n\r\nconst mapStateToProps = ({ location }) => {\r\n    return {\r\n        saving: location.saving,\r\n        saved: location.saved,\r\n    }\r\n}\r\n\r\n//make this component available to the app\r\nexport default connect ( mapStateToProps, { savelocation } ) (ChooseLocation);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}
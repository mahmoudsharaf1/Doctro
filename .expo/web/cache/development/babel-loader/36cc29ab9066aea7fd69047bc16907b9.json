{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar REQM = ' is required';\nvar STRIPE_URL = 'https://api.stripe.com/v1/';\n\nvar Stripe = function () {\n  function Stripe(apiKey) {\n    _classCallCheck(this, Stripe);\n\n    this.stripePublicKey = apiKey;\n  }\n\n  _createClass(Stripe, [{\n    key: \"defaultHeader\",\n    value: function defaultHeader() {\n      return {\n        Accept: 'application/json',\n        Authorization: \"Bearer \" + this.stripePublicKey\n      };\n    }\n  }, {\n    key: \"stripePostRequest\",\n    value: function stripePostRequest(resource, properties) {\n      var body, result;\n      return _regeneratorRuntime.async(function stripePostRequest$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              body = Object.entries(properties).map(function (_ref) {\n                var _ref2 = _slicedToArray(_ref, 2),\n                    key = _ref2[0],\n                    value = _ref2[1];\n\n                return key + \"=\" + value;\n              }).reduce(function (previous, current) {\n                return previous + \"&\" + current;\n              }, '');\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch(\"\" + STRIPE_URL + resource, {\n                method: 'POST',\n                headers: _objectSpread({}, this.defaultHeader(), {\n                  'Content-Type': 'application/x-www-form-urlencoded'\n                }),\n                body: body\n              }));\n\n            case 3:\n              result = _context.sent;\n              return _context.abrupt(\"return\", result.json());\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"createToken\",\n    value: function createToken(info) {\n      if (!info) throw new Error(\"info\" + REQM);\n      if (!info.number) throw new Error(\"cardNumber\" + REQM);\n      if (!info.exp_month) throw new Error(\"expMonth\" + REQM);\n      if (!info.exp_year) throw new Error(\"expYear\" + REQM);\n      if (!info.cvc) throw new Error(\"cvc\" + REQM);\n      var card = {};\n      Object.keys(info).forEach(function (key) {\n        if (info) {\n          card[\"card[\" + key + \"]\"] = info[key];\n        }\n\n        return;\n      });\n      return this.stripePostRequest('tokens', card);\n    }\n  }]);\n\n  return Stripe;\n}();\n\nexport default Stripe;","map":{"version":3,"sources":["E:/react-native/Doctro/node_modules/react-native-stripe-api/src/Stripe.js"],"names":["REQM","STRIPE_URL","Stripe","apiKey","stripePublicKey","Accept","Authorization","resource","properties","body","Object","entries","map","key","value","reduce","previous","current","fetch","method","headers","defaultHeader","result","json","info","Error","number","exp_month","exp_year","cvc","card","keys","forEach","stripePostRequest"],"mappings":";;;;;;;;;;AAEA,IAAMA,IAAI,GAAG,cAAb;AACA,IAAMC,UAAU,GAAG,4BAAnB;;IAGMC,M;AAIJ,kBAAYC,MAAZ,EAA4B;AAAA;;AAC1B,SAAKC,eAAL,GAAuBD,MAAvB;AACD;;;;oCAKe;AACd,aAAO;AACLE,QAAAA,MAAM,EAAE,kBADH;AAELC,QAAAA,aAAa,cAAY,KAAKF;AAFzB,OAAP;AAID;;;sCAOuBG,Q,EAAkBC,U;;;;;;AAClCC,cAAAA,I,GAAOC,MAAM,CAACC,OAAP,CAAeH,UAAf,EACXI,GADW,CACP;AAAA;AAAA,oBAAEC,GAAF;AAAA,oBAAOC,KAAP;;AAAA,uBAAqBD,GAArB,SAA4BC,KAA5B;AAAA,eADO,EAEXC,MAFW,CAEJ,UAACC,QAAD,EAAWC,OAAX;AAAA,uBAA0BD,QAA1B,SAAsCC,OAAtC;AAAA,eAFI,EAE6C,EAF7C,C;;+CAIQC,KAAK,MAAIjB,UAAJ,GAAiBM,QAAjB,EAA6B;AACrDY,gBAAAA,MAAM,EAAE,MAD6C;AAErDC,gBAAAA,OAAO,oBACF,KAAKC,aAAL,EADE;AAEL,kCAAgB;AAFX,kBAF8C;AAMrDZ,gBAAAA,IAAI,EAAJA;AANqD,eAA7B,C;;;AAApBa,cAAAA,M;+CASCA,MAAM,CAACC,IAAP,E;;;;;;;;;;;gCAQGC,I,EAAwB;AAClC,UAAI,CAACA,IAAL,EAAW,MAAM,IAAIC,KAAJ,UAAiBzB,IAAjB,CAAN;AACX,UAAI,CAACwB,IAAI,CAACE,MAAV,EAAkB,MAAM,IAAID,KAAJ,gBAAuBzB,IAAvB,CAAN;AAClB,UAAI,CAACwB,IAAI,CAACG,SAAV,EAAqB,MAAM,IAAIF,KAAJ,cAAqBzB,IAArB,CAAN;AACrB,UAAI,CAACwB,IAAI,CAACI,QAAV,EAAoB,MAAM,IAAIH,KAAJ,aAAoBzB,IAApB,CAAN;AACpB,UAAI,CAACwB,IAAI,CAACK,GAAV,EAAe,MAAM,IAAIJ,KAAJ,SAAgBzB,IAAhB,CAAN;AAEf,UAAM8B,IAAI,GAAG,EAAb;AACApB,MAAAA,MAAM,CAACqB,IAAP,CAAYP,IAAZ,EAAkBQ,OAAlB,CAA0B,UAAAnB,GAAG,EAAI;AAC/B,YAAIW,IAAJ,EAAU;AACRM,UAAAA,IAAI,WAASjB,GAAT,OAAJ,GAAuBW,IAAI,CAACX,GAAD,CAA3B;AACD;;AACD;AACD,OALD;AAMA,aAAO,KAAKoB,iBAAL,CAAuB,QAAvB,EAAiCH,IAAjC,CAAP;AACD;;;;;;AAIH,eAAe5B,MAAf","sourcesContent":["// @flow\n\nconst REQM = ' is required';\nconst STRIPE_URL = 'https://api.stripe.com/v1/';\n\n\nclass Stripe {\n\n  stripePublicKey: string;\n\n  constructor(apiKey: string) {\n    this.stripePublicKey = apiKey;\n  }\n  /**\n   * Return the default header entries : Accept and Authorization\n   * @returns {Object} Default header Accept and Authorization\n   */\n  defaultHeader() {\n    return {\n      Accept: 'application/json',\n      Authorization: `Bearer ${this.stripePublicKey}`,\n    };\n  }\n\n  /**\n   * Generic method post to Stripe Rest API\n   * @param resource : Rest API ressource ie. tokens, charges, etc.\n   * @param properties : object, key by form parm\n   */\n  async stripePostRequest(resource: string, properties: Object): Promise {\n    const body = Object.entries(properties)\n     .map(([key, value]) => `${key}=${value}`)\n     .reduce((previous, current) => `${previous}&${current}`, '');\n\n    const result = await fetch(`${STRIPE_URL}${resource}`, {\n      method: 'POST',\n      headers: {\n        ...this.defaultHeader(),\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body,\n    });\n\n    return result.json();\n  }\n\n  /**\n   * Only operation allowed from client/Using only public token\n   * @param info : { number, exp_month, exp_year, address_city, address_country, address_line1,\n   * ... address_line2, address_state, address_zip, currency, cvc }\n   */\n  createToken(info: ?Object): Promise {\n    if (!info) throw new Error(`info${REQM}`);\n    if (!info.number) throw new Error(`cardNumber${REQM}`);\n    if (!info.exp_month) throw new Error(`expMonth${REQM}`);\n    if (!info.exp_year) throw new Error(`expYear${REQM}`);\n    if (!info.cvc) throw new Error(`cvc${REQM}`);\n\n    const card = {};\n    Object.keys(info).forEach(key => {\n      if (info) {\n        card[`card[${key}]`] = info[key];\n      }\n      return;\n    });\n    return this.stripePostRequest('tokens', card);\n  }\n}\n\n\nexport default Stripe;\n"]},"metadata":{},"sourceType":"module"}
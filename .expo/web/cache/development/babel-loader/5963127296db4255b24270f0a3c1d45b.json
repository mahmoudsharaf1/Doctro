{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport firebase from \"../Firebase\";\nimport FbConfig from \"../FbConfig\";\nimport * as Facebook from 'expo-facebook';\nimport { FB_ATTEMPTING, FB_LOGIN_SUCCESS, FB_LOGIN_FAILED, REFRESH_PROFILE } from \"./type\";\nexport var facebooklogin = function facebooklogin() {\n  return function _callee(dispatch) {\n    var _await$Facebook$logIn, type, token, response;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: FB_ATTEMPTING\n            });\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Facebook.initializeAsync(FbConfig.appId));\n\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Facebook.logInWithReadPermissionsAsync({\n              permissions: ['public_profile', 'user_location', 'user_hometown']\n            }));\n\n          case 5:\n            _await$Facebook$logIn = _context.sent;\n            type = _await$Facebook$logIn.type;\n            token = _await$Facebook$logIn.token;\n\n            if (!(type === 'success')) {\n              _context.next = 22;\n              break;\n            }\n\n            finishlogin(dispatch, token);\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(fetch(\"https://graph.facebook.com/me?access_token=\" + token));\n\n          case 12:\n            response = _context.sent;\n            _context.t0 = Alert;\n            _context.next = 16;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 16:\n            _context.t1 = _context.sent.name;\n            _context.t2 = \"Hi \" + _context.t1;\n            _context.t3 = _context.t2 + \"!\";\n\n            _context.t0.alert.call(_context.t0, 'Logged in!', _context.t3);\n\n            _context.next = 24;\n            break;\n\n          case 22:\n            if (!(type === 'cancel')) {\n              _context.next = 24;\n              break;\n            }\n\n            return _context.abrupt(\"return\", dispatch({\n              type: FB_LOGIN_FAILED\n            }));\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar finishlogin = function finishlogin(dispatch, token) {\n  var credential, _await$firebase$auth$, _await$firebase$auth$2, displayName, photoURL, uid, profile, snap;\n\n  return _regeneratorRuntime.async(function finishlogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(firebase.auth.FacebookAuthProvider.credential(token));\n\n        case 3:\n          credential = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(firebase.auth().signInAndRetrieveDataWithCredential(credential));\n\n        case 6:\n          _await$firebase$auth$ = _context2.sent;\n          _await$firebase$auth$2 = _await$firebase$auth$.user;\n          displayName = _await$firebase$auth$2.displayName;\n          photoURL = _await$firebase$auth$2.photoURL;\n          uid = _await$firebase$auth$2.uid;\n          profile = {\n            displayName: displayName,\n            photoURL: photoURL,\n            uid: uid\n          };\n          _context2.next = 14;\n          return _regeneratorRuntime.awrap(firebase.database().ref(\"users/\" + uid).update(profile));\n\n        case 14:\n          _context2.next = 16;\n          return _regeneratorRuntime.awrap(firebase.database().ref(\"users/\" + uid).once('value'));\n\n        case 16:\n          snap = _context2.sent;\n          profile = snap.val();\n          _context2.next = 20;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('fb_token', token));\n\n        case 20:\n          return _context2.abrupt(\"return\", dispatch({\n            type: FB_LOGIN_SUCCESS,\n            payload: {\n              token: token,\n              profile: profile\n            }\n          }));\n\n        case 23:\n          _context2.prev = 23;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          return _context2.abrupt(\"return\", dispatch({\n            type: FB_LOGIN_FAILED\n          }));\n\n        case 27:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 23]], Promise);\n};\n\nexport var refreshProfileData = function refreshProfileData(uid) {\n  return function _callee2(dispatch) {\n    var snap, profile;\n    return _regeneratorRuntime.async(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(firebase.database().ref(\"users/\" + uid).once('value'));\n\n          case 2:\n            snap = _context3.sent;\n            profile = snap.val();\n            return _context3.abrupt(\"return\", dispatch({\n              type: REFRESH_PROFILE,\n              payload: {\n                profile: profile\n              }\n            }));\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["E:/react-native/Doctro/actions/loginFacebook.js"],"names":["firebase","FbConfig","Facebook","FB_ATTEMPTING","FB_LOGIN_SUCCESS","FB_LOGIN_FAILED","REFRESH_PROFILE","facebooklogin","dispatch","type","initializeAsync","appId","logInWithReadPermissionsAsync","permissions","token","finishlogin","fetch","response","Alert","json","name","alert","auth","FacebookAuthProvider","credential","signInAndRetrieveDataWithCredential","user","displayName","photoURL","uid","profile","database","ref","update","once","snap","val","AsyncStorage","setItem","payload","console","log","refreshProfileData"],"mappings":"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","sourcesContent":["import { AsyncStorage } from 'react-native';\r\nimport firebase from '../Firebase';\r\nimport FbConfig from '../FbConfig'\r\nimport * as Facebook from 'expo-facebook';\r\n\r\nimport {\r\n    FB_ATTEMPTING,\r\n    FB_LOGIN_SUCCESS,\r\n    FB_LOGIN_FAILED,\r\n    REFRESH_PROFILE\r\n} from './type';\r\n\r\n\r\n\r\nexport const facebooklogin = () => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: FB_ATTEMPTING });\r\n\r\n        await Facebook.initializeAsync(FbConfig.appId)\r\n        const { type, token } = await Facebook.logInWithReadPermissionsAsync({ permissions: ['public_profile', 'user_location', 'user_hometown'], });\r\n\r\n        if (type === 'success') {\r\n            finishlogin(dispatch, token);\r\n\r\n            const response = await fetch(`https://graph.facebook.com/me?access_token=${token}`);\r\n            Alert.alert('Logged in!', `Hi ${(await response.json()).name}!`);\r\n\r\n        } else if (type === 'cancel') {\r\n            return dispatch({ type: FB_LOGIN_FAILED });\r\n        }\r\n    }\r\n}\r\n\r\nconst finishlogin = async (dispatch, token) => {\r\n    try {\r\n\r\n        const credential = await firebase.auth.FacebookAuthProvider.credential(token);\r\n\r\n        const { user: { displayName, photoURL, uid } } =\r\n            await firebase.auth().signInAndRetrieveDataWithCredential(credential);\r\n\r\n\r\n        let profile = { displayName, photoURL, uid };\r\n        await firebase.database().ref(`users/${uid}`).update(profile);\r\n\r\n        const snap = await firebase.database().ref(`users/${uid}`).once('value');\r\n        profile = snap.val();\r\n\r\n\r\n        await AsyncStorage.setItem('fb_token', token)\r\n\r\n        return dispatch({ type: FB_LOGIN_SUCCESS, payload: { token, profile } })\r\n    } catch (e) {\r\n        console.log(e);\r\n        return dispatch({ type: FB_LOGIN_FAILED });\r\n    }\r\n};\r\n\r\nexport const refreshProfileData = (uid) => {\r\n    return async (dispatch) => {\r\n        const snap = await firebase.database().ref(`users/${uid}`).once('value');\r\n        const profile = snap.val();\r\n        return dispatch({ type: REFRESH_PROFILE, payload: { profile } })\r\n    };\r\n};\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}